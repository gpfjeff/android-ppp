#summary A brief summary of the goal of bringing Perfect Paper Passwords to Android
#labels Phase-Design

= Introduction =

[https://www.grc.com/ppp.htm Perfect Paper Passwords] is a unique one-time-only password solution developed by Steve Gibson of [https://www.grc.com/ Gibson Research Corporation]. The goal of PPP is to create a relatively simple and easy to implement, yet extremely secure system for creating one-time-use passwords or "passcodes" which will be used once and never used again. Adding such a one-time-use passcode system to an existing authentication scheme can vastly improve its security. Similar to using client-side certificates or Smart Cards as "something you have" in addition to a password ("something you know"), PPP provides a multi-factor authentication solution.

Take make this system even better, it is relatively easy to implement and execute. While Mr. Gibson's personal source code is closed, the specification for the system is open and many third-party implementations have been created that are Open Source. The system is build on open technologies such as familiar cryptographic hashing and encryption algorithms.

In order to use PPP, there must be a server-side authentication module and database and a client-side "card". The server keeps track of the PPP parameters and the current state of the sequence of passcodes. For the user, "cards" may be printed or otherwise stored that contain one segment of the sequence of passcodes. After authentication, the server-side component should provide the user with the facility to generate these cards for later use.

While the original intent of the system was to produce physical, printed cards containing these passcodes, several of the third-party applications developed around PPP include clients that generate passcodes on the fly based on the sequence parameters. This project attempts to straddle the line between these ideas, generating passcodes as they are required by keeping the physical "card" metaphor.

= Card Sets =

PPP for Android introduces the concept of multiple *card sets*. A card set refers to a sequence of PPP cards and requires all the necessary parameters to reproduce a "card":
 * A 256-bit pseudo-random sequence key, typically represented as a 64-character hexadecimal string;
 * A set number of rows and columns per card;
 * The length of each passcode, from 2 to 16 characters;
 * An "alphabet" containing the characters to be used in generating the passcodes.

In addition to these parameters, PPP for Android adds the following:
 * A unique internal identifier (not visible to the user);
 * A user-defined display name so the user can identify the card set from all the others
 * The "current" or "last" card viewed.

The user may have as many card sets as they need or may like (or at least as many as their device's memory can hold). The user will have the ability to rename or delete a card set at any time. (At this time, there is no plan to permit changing other parameters of the card set; the user may create a new card set with the modified parameters and delete the old one.)

= The Card View =

If the user selects a card set from the list, the application moves on to the *card view*. The parameters are loaded from the database and the current/last card is displayed. This will look very similar to the printed cards generated by the GRC site, with rows, columns, and numbered card data. In addition to this, however, buttons will be provided at the top of the view to allow the user to scroll from one card to the next as needed. By selecting the Menu hard button, the user can also find the option to go to any card they wish by entering the number of the card into a dialog box. Thus, the user can easily move from an existing paper card solution to this application and "skip ahead" to where they last left off with little effort.

= "Strike-Outs" =

On the GRC site, it is recommended that users mark or "strike out" used passcodes so they know which passcodes have been used and which have not. Continuing with the card metaphor, PPP for Android also provides a "strike out" functionality. The user may tap on a given passcode to "strike it out" and mark it as used. Unlike a physical card, however, the user can also clear a strike-out by tapping the passcode again. Strike-out data will be stored in the database, so the user will be able to scroll through all the cards in the card set and see what passcodes have been used in the past.

For convenience, a facility will also be provided to clear strike-out data en masse. In the card view, strike-outs can be cleared on a card-by-card basis or for the entire card set sequence. From the card set list, all strike-out data can be cleared for the entire set.

As an additional convenience, the user can set a preference to have the passcode copied to the system clipboard when the code is initially "stricken". The passcode can then be pasted into the authentication form where required. Clearing the strike will not copy the passcode, and this functionality can be disabled for greater security or if it is not needed.

= Password Protection =

Android provides several layers of security to protect the data of any one particular application from other applications installed on the system. However, additional security can be provided by controlling access to the application itself. Thus, the user of PPP for Android will have the ability to set a master password to "lock" the application from unauthorized access. The password must be stored security; the current planned implementation is to cryptographically hash the password several times and store the digest in the app's shared preferences file.

If the password is not set, the application skips the password prompt and goes directly to the card list view (i.e. the main menu). If a password has been set, launching the application instead takes the user to a password prompt. If the password is not supplied correctly, access to the rest of the application's activities will be denied. At this time there are no plans to limit the number invalid password attempts although this may be a possible enhancement for later.

In the advent that the user forgets their password, recovery will not be an option if the password is stored as a cryptographic hash. We must give the user the ability to regain access to the application while providing security to their card set data. While some versions of Android (2.0+) provide a facility to clear user data without uninstalling the application, this utility is buried deep in the system preferences. The current plan is to provide an option in the password prompt menu to allow the user to clear the password. However, doing so will wipe the database and remove all card set and strike-out data.

After the user has been authenticated, the user can clear or change the password within the app's settings activity.