#summary A brainstorming list of future features we'd like to add
#labels Phase-Design

Below are a list of possible features we're considering adding to PPP for Android after its initial release. We consider these secondary features, so they are a lower priority. This list is currently not sorted in any way, so no priority has been assigned to them (yet).

  * *Import/Export Mechanism:* Essentially, provide a means to import and export card set parameters to and from a file on removable storage (i.e. SD or microSD card). This will provide a means of transferring parameters from one device to another if the user needs access from multiple devices, or for backing up parameter data and storing it off-device. The import/export file should be encrypted, keyed off a password supplied by the user. Whether or not strike-out data is included might be optional (but ideal for backup purposes).
  * *Off-Device Backup:* This will likely be a corollary of the above item. The primary backup mechanism will probably be an export file which can then be moved off-device and stored securely on a desktop or laptop computer. Restoration would require moving the export file back to the device and importing it. Another option might be to look into Android's built-in backup mechanism (Android 2.2 and up only) to store the data "in the cloud", although encryption would certainly be required, as would Internet access (which is currently not required).
  * *Card Set Parameter QR Codes:* One possibility of getting card set parameters from the target site to the device might be to have the site generate a specially formatted QR code in addition to generating printable cards. If the user then has a barcode scanning app such as [https://code.google.com/p/zxing/ ZXing]'s [https://market.android.com/details?id=com.google.zxing.client.android&feature=search_result Barcode Scanner], we could pass it an intent, have the user scan the code with that intent, and have the scanner return the scanned text. Strike-out data would not be included, and perhaps the last/current card and display name may be optional.
  * *Password Encrypts Sequence Key:* An enhancement that would greatly improve the security of the entire system would be to extend the password protection to encrypt each card set's sequence key. Currently when the user specifies a password to protect the app, this only protects access to the application through the app UI. If the user cannot supply the correct password, they cannot access the UI to view any passcodes. However, the card set parameter data stored in the application database remains unencrypted. Android has protections to prevent other applications from accessing PPP's data, but all bets are off if a malicious attacker roots the device and gains direct access to the file system. A significant security improvement might be to extend the use of this password such that all or part of the parameter data becomes encrypted when the password is set. While most of the data is not critical, the sequence key is the heart of the card set's security. The proposed improvement would encrypt the sequence key of all card sets in the database immediately after the user successfully sets the access password. An encryption key can be derived from the password (likely using a salt and multiple cryptographic hashes) and stored in transient memory while the app is active. The sequence key can then be decrypted on the fly whenever a card set is loaded from the database, and encrypted whenever a new card set is stored. If the user clears the password, the reverse occurs; the sequence keys are then decrypted and stored in the clear in the database, operating in the same manner as before this enhancement was made.