#summary A brainstorming list of future features we'd like to add
#labels Phase-Design

Below are a list of possible features we're considering adding to PPP for Android. Some we consider to be secondary features, so they are a lower priority, while others may be more critical and may be added before our initial release. This list is currently not sorted in any way, so no priority has been assigned to them (yet).

  * *Import/Export Mechanism:* Essentially, provide a means to import and export card set parameters to and from a file on removable storage (i.e. SD or microSD card). This will provide a means of transferring parameters from one device to another if the user needs access from multiple devices, or for backing up parameter data and storing it off-device. The import/export file should be encrypted, keyed off a password supplied by the user. Whether or not strike-out data is included might be optional (but ideal for backup purposes).
  * *Off-Device Backup:* This will likely be a corollary of the above item. The primary backup mechanism will probably be an export file which can then be moved off-device and stored securely on a desktop or laptop computer. Restoration would require moving the export file back to the device and importing it. Another option might be to look into Android's built-in backup mechanism (Android 2.2 and up only) to store the data "in the cloud", although encryption would certainly be required, as would Internet access (which is currently not required).
  * *Card Set Parameter QR Codes:* One possibility of getting card set parameters from the target site to the device might be to have the site generate a specially formatted QR code in addition to generating printable cards. If the user then has a barcode scanning app such as [https://code.google.com/p/zxing/ ZXing]'s [https://market.android.com/details?id=com.google.zxing.client.android&feature=search_result Barcode Scanner], we could pass it an intent, have the user scan the code with that intent, and have the scanner return the scanned text. Strike-out data would not be included, and perhaps the last/current card and display name may be optional.
  * *Small Screen Support:* During testing, we discovered that "small" or "low density" screen devices cannot practically display the default passcode card view as currently planned. When we adjust the settings to get an entire default-sized card on the screen, the text is so small that it is difficult to read and nearly impossible to tap to toggle. In order to support smaller screens, we will need to create a new simplified UI that displays only one passcode at a time. The passcode might be selected by a text box for the card number, followed by a drop-down list for both row and column. Changing these values will regenerate and display the selected passcode. The passcode itself could still be a toggle button to indicate whether or not the passcode has been used; changing the selection to get a different passcode could load its toggle state from the database and display its current state. The application will need to somehow identify small-screen devices and dynamically display the simplified UI for them rather than the default card view for everyone else. This might be possible by using the res/values folder tree, setting a flag value that is different for small screen devices than everyone else. Unfortunately, while the app currently keeps track of the last card used, it does not keep track of the last passcode. We might be able to approximate this by filtering our query to the last card, then finding out which passcode was the last one toggled and get the next passcode after that.